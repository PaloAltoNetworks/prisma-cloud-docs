<svg id="ssh" xmlns="http://www.w3.org/2000/svg" width="950" height="405" viewBox="100 0 350 235">
  <style>
    @import url('https://fonts.googleapis.com/css?family=Noto+Sans|Noto+Sans:700&amp;display=swap');
    @import url('https://fonts.googleapis.com/css?family=Open+Sans|Open+Sans:700');

    .st0{
      fill:none;
      stroke:#231f20;
      stroke-width:1.544;
      stroke-linecap:round;
      stroke-linejoin:round;
      stroke-miterlimit:10
    }
    .st1{
      fill-rule:evenodd;
      clip-rule:evenodd;
      fill:#231f20
    }
    .st2{
      fill:none;
      stroke-width:1.2381;
      stroke-linecap:round;
      stroke-linejoin:round;
      stroke-dasharray:1.2381,2.4762
    }
    .st2,.st3,.st9{
      stroke:#231f20;
      stroke-miterlimit:10
    }
    .st3{
      stroke-width:1.5435;
      stroke-linecap:round;
      stroke-linejoin:round;
      fill:none
    }
    .st9{
      fill:#00BAB6
    }
    .st10{
      font-family: &apos;Noto Sans&apos;, &apos;Open Sans&apos;, sans-serif;
      font-weight:700;
    }
    .st11{
      font-size:8px
    }
    .st12{
      fill:#F49342
    }
    .st12:hover {
    cursor:pointer;
    fill:#D12765;
    }
    #tooltip {
      dy: .7em;
      font-size: 7px;
      font-family: &apos;Noto Sans&apos;, &apos;Open Sans&apos;, sans-serif;
    }
    .st13{
      font-family: &apos;Noto Sans&apos;, &apos;Open Sans&apos;, sans-serif;
    }
    .st14{
      fill:#0062FF;
      stroke:#231f20;
      stroke-width:.6;
      stroke-miterlimit:10
    }
  </style>
    <g>
      <path class="st0" d="M37.1 74.1h99.7"/>
      <path class="st1" d="M135.2 70.6l7.1 3.6-7.1 3.5v-7.1"/>
      <path class="st2" d="M34.2 45.3v199.5M146.4 45.3v199.5"/>
      <path class="st0" d="M257.1 212.9H45.7"/>
      <path class="st1" d="M45.4 216.4l-7.1-3.6 7.1-3.5v7.1"/>
      <path class="st2" d="M372.2 45.3v199.5M259.3 42.6v202.2"/>
      <path class="st3" d="M149 74.2h11.1m.4 18.8h-7.9"/>
      <path class="st1" d="M156.9 89.4l-7.1 3.6 7.1 3.6v-7.2"/>
      <path class="st3" d="M158.9 74.2c2.9-.1 5.2.3 6.5.7 1.7.5 2.6 1 3 1.3.3.2 1.7 1.1 2.8 2.9.5.9 1.9 3.1 1.5 5.9-.3 2.3-1.6 3.8-2.1 4.3-2.1 2.4-4.9 2.9-6.9 3.3-1.6.3-2.9.4-3.8.3"/>
      <path class="st0" d="M144.8 92.9H45.7"/>
      <path class="st1" d="M45.4 96.2l-7.1-3.5 7.1-3.6v7.1"/>
      <path class="st0" d="M261 164.4h100.7"/>
      <path class="st1" d="M362 161l7.1 3.6-7.1 3.5V161"/>
      <path class="st9" d="M113.1.9h67.5v43.4h-67.5z"/>
      <text transform="translate(131.328 15.56)">
        <tspan x="0" y="0" class="st10 st11">Aporeto</tspan><tspan x="2.1" y="9.6" class="st10 st11">control</tspan><tspan x="5.2" y="19.2" class="st10 st11">plane</tspan>
      </text>
      <path class="st9" d="M225.8.9h67.5v43.4h-67.5z"/>
      <text transform="translate(241.202 15.56)">
        <tspan x="0" y="0" class="st10 st11">OpenSSH</tspan><tspan x="10.3" y="9.6" class="st10 st11">SSH</tspan><tspan x="3.1" y="19.2" class="st10 st11">daemon</tspan>
      </text>
      <path class="st9" d="M.5.9H68v43.4H.5z"/>
      <text transform="translate(22.954 25.16)" class="st10 st11">
        Client
      </text>
      <circle class="st12" cx="47.8" cy="74.2" r="6" data-tooltip-text="The user sends their Aporeto token and public key, requesting an SSH certificate from the Aporeto certificate authority." data-width="80" x="-60" y="20"/>
      <text transform="translate(46.093 76.8)" class="st10 st11" pointer-events="none">
        1
      </text>
      <circle class="st12" cx="206.6" cy="76.8" r="6" data-tooltip-text="The Aporeto control plane checks the role in the user's Aporeto token to determine whether they can request certificates. Then it checks the claims in the token against the SSH authorization." data-width="200" x="15" y="-20"/>
      <text transform="translate(204.35 79.36)" class="st10 st11" pointer-events="none">
        2
      </text>
      <circle class="st12" cx="273" cy="164.8" r="6" data-tooltip-text="The OpenSSH SSH daemon invokes the authorized principals binary, passing it the certificate." data-width="160" x="-270" y="-50"/>
      <text transform="translate(270.858 167.406)" class="st10 st11" pointer-events="none">
        6
      </text>
      <text transform="translate(57.547 88.8)" class="st13 st11">
        return certificate
      </text>
      <text transform="translate(59.441 69.2)" class="st13 st11">
        request certificate
      </text>
      <text transform="translate(177.042 72.778)">
        <tspan x="0" y="0" class="st13 st11">check</tspan><tspan x="0" y="9.6" class="st13 st11">SSH </tspan><tspan x="0" y="19.2" class="st13 st11">authorization</tspan>
      </text>
      <text transform="translate(300.06 159.035)" class="st13 st11">
        invoke
      </text>
      <text transform="translate(55.607 208.255)" class="st13 st11">
        secure shell session
      </text>
      <path class="st0" d="M34.2 120.9h217"/>
      <path class="st1" d="M248.8 117.6l7.1 3.6-7.1 3.5v-7.1"/>
      <path class="st9" d="M338.4.5h67.5v43.4h-67.5z"/>
      <text transform="translate(356.571 15.16)">
        <tspan x="0" y="0" class="st10 st11">Aporeto</tspan><tspan x="-4.8" y="9.6" class="st10 st11">authorized</tspan><tspan x="-2.7" y="19.2" class="st10 st11">principals</tspan>
      </text>
      <path class="st9" d="M451 .5h67.5v43.4H451z"/>
      <text transform="translate(469.144 19.96)">
        <tspan x="0" y="0" class="st10 st11">Aporeto</tspan><tspan x="-.4" y="9.6" class="st10 st11">enforcer</tspan>
      </text>
      <path class="st2" d="M486.3 45.3v199.5"/>
      <path class="st14" d="M144.2 59.2h4.4v47.2h-4.4V59.2z"/>
      <circle class="st12" cx="132.8" cy="93.7" r="6" data-tooltip-text="The Aporeto control plane returns an Aporeto SSH certificate containing the user's public key, signed by the Aporeto certificate authority, and the claims from the user's Aporeto token." data-width="80" x="5" y="10"/>
      <text transform="translate(130.66 97)" class="st10 st11" pointer-events="none">
        3
      </text>
      <path class="st14" d="M32 59.2h4.4v166.7H32V59.2z"/>
      <text transform="translate(57.965 115.625)" class="st13 st11">
        request secure shell
      </text>
      <circle class="st12" cx="47.8" cy="121.9" r="6" data-tooltip-text="The client sends the Aporeto SSH certificate to the remote host, requesting a secure shell." data-width="100" x="5" y="10"/>
      <text transform="translate(45.397 124.29)" class="st10 st11" pointer-events="none">
        4
      </text>
      <path class="st3" d="M261.4 121.2h11.1m.4 18.8H265"/>
      <path class="st1" d="M269.3 136.4l-7.1 3.6 7.1 3.6v-7.2"/>
      <path class="st3" d="M271.3 121.2c2.9-.1 5.2.3 6.5.7 1.7.5 2.6 1 3 1.3.3.2 1.7 1.1 2.8 2.9.5.9 1.9 3.1 1.5 5.9-.3 2.3-1.6 3.8-2.1 4.3-2.1 2.4-4.9 2.9-6.9 3.3-1.6.3-2.9.4-3.8.3"/>
      <text transform="translate(290.043 129.542)">
        <tspan x="0" y="0" class="st13 st11">check</tspan><tspan x="0" y="9.6" class="st13 st11">signature</tspan>
      </text>
      <circle class="st12" cx="278.8" cy="119.3" r="6" data-tooltip-text="The OpenSSH SSH daemon checks the signature on the certificate against its list of trusted certificate authorities." data-width="160" x="10" y="-70"/>
      <text transform="translate(276.583 121.89)" class="st10 st11" pointer-events="none">
        5
      </text>
      <path class="st0" d="M374.1 174h98.8"/>
      <path class="st1" d="M473.1 170.8l7.1 3.6-7.1 3.5v-7.1"/>
      <text transform="translate(412.248 168.762)" class="st13 st11">
        forward
      </text>
      <path class="st3" d="M488.4 173.4h11.1M499.9 192.2H492"/>
      <path class="st1" d="M496.3 188.6l-7.1 3.6 7.1 3.6v-7.2"/>
      <path class="st3" d="M498.3 173.4c2.9-.1 5.2.3 6.5.7 1.7.5 2.6 1 3 1.3.3.2 1.7 1.1 2.8 2.9.5.9 1.9 3.1 1.5 5.9-.3 2.3-1.6 3.8-2.1 4.3-2.1 2.4-4.9 2.9-6.9 3.3-1.6.3-2.9.4-3.8.3"/>
      <text transform="translate(493.935 206.135)">
        <tspan x="0" y="0" class="st13 st11">check</tspan><tspan x="0" y="9.6" class="st13 st11">SSH </tspan><tspan x="0" y="19.2" class="st13 st11">authorization</tspan>
      </text>
      <path class="st0" d="M484.8 192.2h-102"/>
      <path class="st1" d="M383.6 188.7l-7.1 3.6 7.1 3.5v-7.1"/>
      <path class="st14" d="M484.1 162.8h4.4v41.5h-4.4v-41.5z"/>
      <text transform="translate(406.937 186.85)" class="st13 st11">
        authorized
      </text>
      <g>
        <circle class="st12" cx="386.9" cy="173.8" r="6" data-tooltip-text="The authorized principals binary forwards the request to the enforcer, along with the claims from the user's certificate." data-width="80" x="-5" y="-130"/>
        <text transform="translate(384.876 176.322)" class="st10 st11" pointer-events="none">
          7
        </text>
      </g>
      <path class="st0" d="M370.1 202.6H267"/>
      <path class="st1" d="M270 199l-7.1 3.6 7.1 3.5V199"/>
      <text transform="translate(293.937 196.3)" class="st13 st11">
        authorized
      </text>
      <g>
        <circle class="st12" cx="512.2" cy="181.8" r="6" data-tooltip-text="The enforcer checks the user's claims against the SSH authorization." data-width="80" x="-90" y="-100"/>
        <text transform="translate(509.892 184.36)" class="st10 st11" pointer-events="none">
          8
        </text>
      </g>
      <path class="st14" d="M370.1 154.3h4.4v61.4h-4.4v-61.4zM257.1 110.2h4.4v115.2h-4.4V110.2z"/>
    </g>
    <g id="tooltip" visibility="hidden" transform="translate(87.9511512134412 127.90914747977598)">
      <rect x="2" y="2" width="52.90066909790039" height="24" fill="#B9BFC7" opacity="0.4" rx="2" ry="2"></rect>
      <rect width="52.90066909790039" height="24" fill="#FEE389" rx="2" ry="2"></rect>
      <text x="4" y="6" id="text">A box</text>
    </g>
  <script type="text/javascript">
        <![CDATA[

  (function () {
  var svg = document.getElementById("ssh");
  var tooltip = svg.getElementById("tooltip");
  console.log(tooltip);
  var tooltipRects = tooltip.getElementsByTagName("rect");
  console.log(tooltipRects);
  var triggers = svg.getElementsByClassName("st12");
  console.log(triggers);
  var tooltipText = tooltip.getElementsByTagName("text")[0];
  console.log(tooltipText);

  // Add listeners
  for (var i = 0; i < triggers.length; i++) {
    triggers[i].addEventListener("mouseover", showTooltip);
    triggers[i].addEventListener("mouseout", hideTooltip);
  }

  function showTooltip(evt) {

    console.log(tooltipText);
    var CTM = svg.getScreenCTM();
    var horizontal = parseFloat(evt.target.getAttributeNS(null, "x"));
    console.log(horizontal);
    var x = (evt.clientX - CTM.e + horizontal) / CTM.a;
    console.log(x);
    var tspanX = tooltipText.getAttributeNS(null, 'x');
    console.log(tspanX);
    var vertical = parseFloat(evt.target.getAttributeNS(null, "y"));
    console.log(vertical);
    var y = (evt.clientY - CTM.f + vertical) / CTM.d;
    console.log(y);
    tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
    tooltip.setAttributeNS(null, "visibility", "visible");
    console.log(tooltip);

    // Sets variable containing data-width as float
    var width = parseFloat(evt.target.getAttributeNS(null, "data-width"));
    console.log(width);

    console.log(tooltipText);
    // Replaces text Element string with string from st12
    tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");
    console.log(tooltipText.firstChild.data);

    // Convert string to array of words
    var words = tooltipText.firstChild.data.split(' ');
    console.log(words);

    // Clear original text
    tooltipText.firstChild.data = "";
    console.log(tooltipText.firstChild.data);

    // Create empty tspan element
    var tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
    tspanElement.setAttributeNS(null, "id", "tspan");
    tspanElement.setAttributeNS(null, "dy", ".7em");
    console.log(tspanElement);

    // Create text node containing a word
    var textNode = document.createTextNode(words[0]);
    console.log(textNode);

    // Add tspan element to DOM
    tspanElement.appendChild(textNode);
    console.log(tspanElement);

    // Add text to tspan element
    tooltipText.appendChild(tspanElement);
    console.log(tooltipText);

    for (var i = 1; i < words.length; i++) {
      var len = textNode.data.length;
      console.log(len);

      // Add next word
      tspanElement.firstChild.data += " " + words[i];
      console.log(tspanElement);

      console.log(tspanElement.getComputedTextLength());
      if (tspanElement.getComputedTextLength() > width) {
        // Remove added word
        tspanElement.firstChild.data = tspanElement.firstChild.data.slice(0, len);

        // Create new tspan element
        tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        tspanElement.setAttributeNS(null, "x", tspanX);
        tspanElement.setAttributeNS(null, "dy", 10);
        tspanElement.setAttributeNS(null, "id", "tspan");
        console.log(tspanElement);
        textNode = document.createTextNode(words[i]);
        tspanElement.appendChild(textNode);
        tooltipText.appendChild(tspanElement);
      }
    }

    var bbox = tooltipText.getBBox();
    var textWidth = bbox.width;
    console.log(textWidth);
    for (var i = 0; i < tooltipRects.length; i++) {
      tooltipRects[i].setAttributeNS(null, "width", textWidth + 8);
    }

    var textHeight = bbox.height;
    for (var i = 0; i < tooltipRects.length; i++) {
      tooltipRects[i].setAttributeNS(null, "height", textHeight + 8);
    }

  }

  function hideTooltip(evt) {
    console.log('Mouse out');
    tooltip.setAttributeNS(null, "visibility", "hidden");
    console.log(tooltip);
    var text = svg.getElementById('text');
    console.log(text);
    while(text.firstChild) {
      text.removeChild(text.firstChild);
    }
    var str = "A box";
    text.innerHTML = str;
    console.log(text);
  }

  })()



        ]]>
  </script>
</svg>
