
<svg id="oidc-ctrl" xmlns="http://www.w3.org/2000/svg" width="700" height="450" viewBox="105 0 200 275">
  <style>
  @import url('https://fonts.googleapis.com/css?family=Montserrat|Montserrat:700');
  .st0,.st1{
    fill:#54bee4;
    stroke:#231f20;
    stroke-miterlimit:10
  }
  .st1{
    fill:none;
    stroke-width:1.544;
    stroke-linecap:round;
    stroke-linejoin:round
  }
  .st2{
    fill-rule:evenodd;
    clip-rule:evenodd;
    fill:#231f20
  }
  .st3,.st4{
    fill:none;
    stroke:#231f20;
    stroke-linecap:round;
    stroke-linejoin:round;
    stroke-miterlimit:10
  }
  .st3{
    stroke-dasharray:1.2381,2.4762;
    stroke-width:1.2381
  }
  .st4{
    stroke-width:1.5435
  }
  .st10{
    font-family: Montserrat, Helvetica, Arial, sans-serif;
    font-weight:700;
  }
  .st11{
    font-size:7.5px
  }
  .st12{
    fill:#F4BB01
  }
  .st12:hover {
    cursor:pointer;
    fill:#fa582d;
  }
  #tooltip {
    dy: .7em;
    font-size: 6.5px;
    font-family: Montserrat, Helvetica, Arial, sans-serif;
  }
  .st13{
    font-family: Montserrat, Helvetica, Arial, sans-serif;
  }
  .st14{
    fill:#006FCC
  }
  .st15{
    fill:none;
    stroke:#231f20;
    stroke-linecap:round;
    stroke-linejoin:round;
    stroke-miterlimit:10
  }
  </style>
    <g>
      <path class="st0" d="M.5.5H68v43.4H.5zM118.1.5h67.5v43.4h-67.5zM237.6.5h67.5v43.4h-67.5z"/>
      <path class="st1" d="M34.7 149.2h106.2"/>
      <path class="st2" d="M140 145.6l7.1 3.6-7.1 3.5v-7.1"/>
      <path class="st1" d="M33.1 68.8h229.6"/>
      <path class="st2" d="M260.4 65.3l7.1 3.6-7.1 3.5v-7.1"/>
      <path class="st3" d="M34 44.6v231.3M151.9 44.6v231.3"/>
      <path class="st1" d="M269.5 209.3H163.3"/>
      <path class="st2" d="M163 213l-7.1-3.7 7.1-3.4v7.1"/>
      <path class="st3" d="M271.3 44.2v231.7"/>
      <path class="st4" d="M273.9 229H285m.4 18.8h-7.9"/>
      <path class="st2" d="M281.8 244.2l-7.1 3.6 7.1 3.6v-7.2"/>
      <path class="st4" d="M283.8 229c2.9-.1 5.2.3 6.5.7 1.7.5 2.6 1 3 1.3.3.2 1.7 1.1 2.8 2.9.5.9 1.9 3.1 1.5 5.9-.3 2.3-1.6 3.8-2.1 4.3-2.1 2.4-4.9 2.9-6.9 3.3-1.6.3-2.9.4-3.8.3"/>
      <path class="st1" d="M151.9 128.3H45.7"/>
      <path class="st2" d="M45.6 131.8l-7.1-3.5 7.1-3.6v7.1"/>
      <path class="st1" d="M154.3 228.8h106.2"/>
      <path class="st2" d="M260.4 225.2l7.1 3.6-7.1 3.5v-7.1"/>
      <path class="st1" d="M53.6 88.1h218.2"/>
      <path class="st4" d="M142 107H53"/>
      <path class="st2" d="M140 103.5v7.1l7.1-3.5-7.1-3.6"/>
      <path class="st4" d="M52.6 107c-.9 0-2.3 0-3.8-.3-2-.4-4.8-1-6.9-3.3-.5-.5-1.8-2-2.1-4.3-.4-2.9.9-5.1 1.5-5.9 1.1-1.8 2.5-2.7 2.8-2.9.4-.3 1.2-.8 3-1.3 1.4-.4 3.6-.9 6.5-.7"/>
      <text transform="translate(136.744 14.76)">
        <tspan x="0" y="0" class="st10 st11">Identity</tspan><tspan x="-1.1" y="9.6" class="st10 st11">provider</tspan><tspan x="6.2" y="19.2" class="st10 st11">(IdP)</tspan>
      </text>
      <text transform="translate(255.77 24.567)" class="st10 st11">
        Console
      </text>
      <text transform="translate(23.404 24.567)" class="st10 st11">
        Client
      </text>
      <circle class="st12" cx="51.6" cy="68.8" r="6" data-tooltip-text="The user uses the Microsegmentation Console web or command-line interface to login, selecting the OpenID Connect (OIDC) method." data-width="80" x="-80" y="20"/>
      <text transform="translate(49.893 71.4)" class="st10 st11" pointer-events="none">
        1
      </text>
      <circle class="st12" cx="178.2" cy="88.3" r="6" data-tooltip-text="The Console responds with HTTP 307, redirecting the browser to the identity provider. The Console includes a callback URL in the redirect, so that the identity provider can send the browser back to the Console after authenticating the user." data-width="160" x="-45" y="10"/>
      <text transform="translate(175.962 90.815)" class="st10 st11" pointer-events="none">
        2
      </text>
      <circle class="st12" cx="135.8" cy="128.1" r="6" data-tooltip-text="The user authenticates to the identity provider. The exact sequence depends on the identity provider, but it often includes consent to the requested scopes." data-width="180" x="25" y="-50"/>
      <text transform="translate(133.66 131.4)" class="st10 st11" pointer-events="none">
        3
      </text>
      <ellipse transform="rotate(-80.781 290.74 228.845)" class="st12" cx="290.7" cy="228.8" rx="6" ry="6" data-tooltip-text="The Console writes the claims in the ID token to the Microsegmentation token." data-width="55" x="-50" y="-120"/>
      <text transform="translate(288.543 231.41)" class="st10 st11" pointer-events="none">
        6
      </text>
      <text transform="translate(52.923 123.4)" class="st13 st11">
        request credentials
      </text>
      <text transform="translate(58.213 144.6)" class="st13 st11">
        send credentials
      </text>
      <text transform="translate(182.609 161.061)" class="st13 st11">
        authenticate
      </text>
      <text transform="translate(180.269 223.691)" class="st13 st11">
        send ID token
      </text>
      <text transform="translate(64.337 63.8)" class="st13 st11">
        login request
      </text>
      <text transform="translate(53.463 100.836)">
        <tspan x="0" y="0" class="st13 st11">redirect to </tspan><tspan x="40.9" y="0" class="st10 st11">IdP URL</tspan>
      </text>
      <text transform="translate(52.48 181.45)">
        <tspan x="0" y="0" class="st13 st11">redirect to </tspan><tspan x="40.9" y="0" class="st10 st11">callback URL</tspan>
      </text>
      <text transform="translate(178.17 203.2)" class="st13 st11">
        request ID token
      </text>
      <path class="st4" d="M262.3 186.8H52.9"/>
      <path class="st2" d="M260.4 183.4v7.1l7.1-3.5-7.1-3.6"/>
      <path class="st4" d="M52.7 186.8c-.9 0-2.3 0-3.8-.3-2-.4-4.8-1-6.9-3.3-.5-.5-1.8-2-2.1-4.3-.4-2.9.9-5.1 1.5-5.9 1.1-1.8 2.5-2.7 2.8-2.9.4-.3 1.2-.8 3-1.3 1.4-.4 3.6-.9 6.5-.7"/>
      <text transform="translate(302.696 240.8)" class="st13 st11">
        exchange
      </text>
      <circle class="st12" cx="250.2" cy="211" r="6" data-tooltip-text="The Console exchanges the authorization code for a shortlived ID token containing the requested claims." data-width="60" x="20" y="-160"/>
      <text transform="translate(248.015 213.516)" class="st10 st11" pointer-events="none">
        5
      </text>
      <path class="st14" d="M31.7 56.1h5.2v202.3h-5.2V56.1z"/>
      <path class="st15" d="M31.7 56.1h5.2v202.3h-5.2V56.1z"/>
      <path class="st1" d="M43.1 247.6h229.6"/>
      <path class="st2" d="M45.6 244.1v7.1l-7.1-3.5 7.1-3.6"/>
      <text transform="translate(51.943 242.302)" class="st13 st11">
        send Microseg token
      </text>
      <path class="st1" d="M151.8 167.9H52.9"/>
      <circle class="st12" cx="51.6" cy="168.1" r="6" data-tooltip-text="The identity provider checks the callback URL provided in the initial HTTP 307 redirect against its list of allowed callback URLs. If the identity provider finds an exact match, it redirects the browser to the Console and includes an authorization code." data-width="120" x="-80" y="20"/>
      <text transform="translate(49.204 170.454)" class="st10 st11" pointer-events="none">
        4
      </text>
      <circle class="st12" cx="178.2" cy="246.8" r="6" data-tooltip-text="The Console returns a Microsegmentation token containing the claims from the identity provider." data-width="330" x="-300" y="10"/>
      <text transform="translate(176.147 249.36)" class="st10 st11" pointer-events="none">
        7
      </text>
      <path class="st14" d="M149.4 103.2h4.8v128.6h-4.8V103.2z"/>
      <path class="st15" d="M149.4 103.2h4.8v128.6h-4.8V103.2z"/>
      <g>
        <path class="st4" d="M154.9 149.2H166m.4 18.8h-7.9"/>
        <path class="st2" d="M162.8 164.4l-7.1 3.6 7.1 3.6v-7.2"/>
        <path class="st4" d="M164.8 149.2c2.9-.1 5.2.3 6.5.7 1.7.5 2.6 1 3 1.3.3.2 1.7 1.1 2.8 2.9.5.9 1.9 3.1 1.5 5.9-.3 2.3-1.6 3.8-2.1 4.3-2.1 2.4-4.9 2.9-6.9 3.3-1.6.3-2.9.4-3.8.3"/>
      </g>
      <path class="st14" d="M268.9 55.3h4.9V259h-4.9V55.3z"/>
      <path class="st15" d="M268.9 55.3h4.9V259h-4.9V55.3z"/>
    </g>
    <g id="tooltip" visibility="hidden" transform="translate(87.9511512134412 127.90914747977598)">
      <rect x="2" y="2" width="52.90066909790039" height="24" fill="#B9BFC7" opacity="0.4" rx="2" ry="2"></rect>
      <rect width="52.90066909790039" height="24" fill="#fef4cf" rx="2" ry="2"></rect>
      <text x="4" y="6" id="text">A box</text>
    </g>
    <script type="text/javascript">
        <![CDATA[

  (function () {
  var svg = document.getElementById("oidc-ctrl");
  var tooltip = svg.getElementById("tooltip");
  console.log(tooltip);
  var tooltipRects = tooltip.getElementsByTagName("rect");
  console.log(tooltipRects);
  var triggers = svg.getElementsByClassName("st12");
  console.log(triggers);
  var tooltipText = tooltip.getElementsByTagName("text")[0];
  console.log(tooltipText);

  // Add listeners
  for (var i = 0; i < triggers.length; i++) {
    triggers[i].addEventListener("mouseover", showTooltip);
    triggers[i].addEventListener("mouseout", hideTooltip);
  }

  function showTooltip(evt) {

    console.log(tooltipText);
    var CTM = svg.getScreenCTM();
    var horizontal = parseFloat(evt.target.getAttributeNS(null, "x"));
    console.log(horizontal);
    var x = (evt.clientX - CTM.e + horizontal) / CTM.a;
    console.log(x);
    var tspanX = tooltipText.getAttributeNS(null, 'x');
    console.log(tspanX);
    var vertical = parseFloat(evt.target.getAttributeNS(null, "y"));
    console.log(vertical);
    var y = (evt.clientY - CTM.f + vertical) / CTM.d;
    console.log(y);
    tooltip.setAttributeNS(null, "transform", "translate(" + x + " " + y + ")");
    tooltip.setAttributeNS(null, "visibility", "visible");
    console.log(tooltip);

    // Sets variable containing data-width as float
    var width = parseFloat(evt.target.getAttributeNS(null, "data-width"));
    console.log(width);

    console.log(tooltipText);
    // Replaces text Element string with string from st12
    tooltipText.firstChild.data = evt.target.getAttributeNS(null, "data-tooltip-text");
    console.log(tooltipText.firstChild.data);

    // Convert string to array of words
    var words = tooltipText.firstChild.data.split(' ');
    console.log(words);

    // Clear original text
    tooltipText.firstChild.data = "";
    console.log(tooltipText.firstChild.data);

    // Create empty tspan element
    var tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
    tspanElement.setAttributeNS(null, "id", "tspan");
    tspanElement.setAttributeNS(null, "dy", ".7em");
    console.log(tspanElement);

    // Create text node containing a word
    var textNode = document.createTextNode(words[0]);
    console.log(textNode);

    // Add tspan element to DOM
    tspanElement.appendChild(textNode);
    console.log(tspanElement);

    // Add text to tspan element
    tooltipText.appendChild(tspanElement);
    console.log(tooltipText);

    for (var i = 1; i < words.length; i++) {
      var len = textNode.data.length;
      console.log(len);

      // Add next word
      tspanElement.firstChild.data += " " + words[i];
      console.log(tspanElement);

      console.log(tspanElement.getComputedTextLength());
      if (tspanElement.getComputedTextLength() > width) {
        // Remove added word
        tspanElement.firstChild.data = tspanElement.firstChild.data.slice(0, len);

        // Create new tspan element
        tspanElement = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        tspanElement.setAttributeNS(null, "x", tspanX);
        tspanElement.setAttributeNS(null, "dy", 10);
        tspanElement.setAttributeNS(null, "id", "tspan");
        console.log(tspanElement);
        textNode = document.createTextNode(words[i]);
        tspanElement.appendChild(textNode);
        tooltipText.appendChild(tspanElement);
      }
    }

    var bbox = tooltipText.getBBox();
    var textWidth = bbox.width;
    console.log(textWidth);
    for (var i = 0; i < tooltipRects.length; i++) {
      tooltipRects[i].setAttributeNS(null, "width", textWidth + 8);
    }

    var textHeight = bbox.height;
    for (var i = 0; i < tooltipRects.length; i++) {
      tooltipRects[i].setAttributeNS(null, "height", textHeight + 8);
    }

  }

  function hideTooltip(evt) {
    console.log('Mouse out');
    tooltip.setAttributeNS(null, "visibility", "hidden");
    console.log(tooltip);
    var text = svg.getElementById('text');
    console.log(text);
    while(text.firstChild) {
      text.removeChild(text.firstChild);
    }
    var str = "A box";
    text.innerHTML = str;
    console.log(text);
  }

  })()



        ]]>
    </script>
</svg>

